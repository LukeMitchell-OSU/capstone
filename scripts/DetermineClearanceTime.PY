"""
Tool:               Determine time to clear a given area of debris
Source Name:        DetermineClearanceTime.PY
ArcGIS Version:     2.6.0
Required Arguments: Area Polygon:
                        The area polygon is the polygon the user drew in ArcGIS Pro. This area should represent the area the user wants to clear of debris.
                    Debris Raster:
                        The debris raster is the file generated by the CreateRandomRaster script for this example. It should be a rasterized dataset as a .tif file. The data should represent debris spread.
                    Debris Units:
                        This is what the units of debris are in. It should line up with the raster file. It is default set to cubic yards.

Optional Arguments: Clipped Raster File Name:
                        This is an optional variable. It will be the name of the output file this script creates.

Description:        Tool to determine the total time to clear a given area of debris. It utilizes the Arcpy library by reading in the debris raster data and 
                    setting some material variables in order to estimate the time it would take to clean a certain area.
    

"""
import arcpy
import numpy
import os
import math
from DetermineDebrisVolume import determineTotalVolume, increase_suffix

if __name__ == '__main__':

    area = arcpy.GetParameter(0)                # the feature class containing the polygon area to calculate
    debris = arcpy.GetParameter(1)              # the raster feature layer containing the spread of debris
    numLoaders = int(arcpy.GetParameter(2))
    trucksPerLoader = int(arcpy.GetParameter(3))
    routeLength = float(arcpy.GetParameter(4)  )
    TruckVLimit = float(arcpy.GetParameter(5))
    truckWLimit = float(arcpy.GetParameter(6))
    efficiency = float(arcpy.GetParameter(7))
    workHourDay = float(arcpy.GetParameter(8))
    truckSpeedL = float(arcpy.GetParameter(9))
    truckSpeedE = float(arcpy.GetParameter(10))
    loadTime = float(arcpy.GetParameter(11))
    dumpTime = float(arcpy.GetParameter(12))
    waitingTime = float(arcpy.GetParameter(13))

    #   Get the total volume of debris in the area
    #
    areaDesc = arcpy.Describe(area)
    
    extentStr = "{} {} {} {}".format(
    	areaDesc.extent.XMin, areaDesc.extent.YMin, areaDesc.extent.XMax, areaDesc.extent.YMax)
    
    suff = 0
    suff = increase_suffix(suff)
    clipPath = "./output/clip" + str(suff) + ".tif"

    # clip the debris just to the given area
    debrisClip = arcpy.Clip_management(debris, extentStr, clipPath, area, 0,
                                       "ClippingGeometry", "MAINTAIN_EXTENT")

    #total volume of debris in cubic yards
    totalDebrisVolume = determineTotalVolume(debrisClip, clipPath)

    # Density (lb/cy)
    ConcreteDensity = 860
    # wood/ brick density
    WnBDensity = 169

    # Formula:
    
    # Here should be a if statement to choose density type, ConcreteDensity is for temporary use
    
    # Weight of per truck(tons)
    TruckWeight = ConcreteDensity * TruckVLimit / 2000

    # Distance/Speed:
    HaulTime = routeLength / truckSpeedL * 60
    ReturnTime = routeLength / truckSpeedE * 60

    truckCycleTimeMins = loadTime + HaulTime + dumpTime + ReturnTime + waitingTime
    truckCycleTimeHours = truckCycleTimeMins / 60

    # ideal number trucks/loader: the number of trucks per loader so loader can constantly be filling a truck
    ideal = 1 / (loadTime / 60)

    #come back to this later, add message mentioning an ideal allocation of resources and the time that would save
    if (int(trucksPerLoader) < ideal):
        Productivity = trucksPerLoader*TruckVLimit/truckCycleTimeHours*efficiency
    else:
        # ideal productivity
        Productivity = ideal*TruckVLimit/truckCycleTimeHours*efficiency

    TimeToClear = totalDebrisVolume/Productivity

    # days to clear with the given resources
    DaysToClean = TimeToClear / workHourDay
    #DaysToClean = Days1Fleet/(int(loaderFleets)*2000)

    RcleanTime = round(DaysToClean, 2)
    message1 = "The total time for cleaning the debris is {time} days"
    arcpy.AddMessage(message1.format(time=RcleanTime))